def string_seq(a_string):
	counter_curr = 0
	counter_max = 0
	c_array = list(a_string)
	//curr_char = ''
	max_char = ‘’
	for x in range(0, (len(c_array)-1) ):
		If c_array.count(c_array[x]) > 1:
			If c_array[x] is c_array[x+1]:
				counter_curr += 1
				//curr_char = c_array[x]
				if(counter_curr > counter_max):
					counter_max = counter_curr
					max_char = c_array[x]
		else
			counter_cur = 0
				
	return max_char


n^2 run time?

find the length of the longest sequence of consecutive integers in array
[ 3 4 7 8 9 1 ] -> 3

//a variable to check the next value in the array (i + 1 != drop it)
// increase the counter variable for consecutive
// if vector reaches end then return counter

int sequence(vector<int> arr){
	int counter_curr = 0;
	int counter_max = 0;
if(arr.size() == 0){
	return counter_max;
}
	for(int i = 0; i < arr.size()-1; i++){
if(arr[i+1] - arr[i] == 1){
			counter_curr += 1;
			if(counter_curr > counter_max){
				counter_max = counter_curr;
			}
		}
		else{
			counter_curr = 0;
	}
	return counter_max + 1;

def print_streams(streams)
  vals = steams.map{|s| s.read}
  while true
    min = vals.min
    i = vals.index(min)
    p min
    vals[i] = streams[i].read
  end
end

run time is log(n)